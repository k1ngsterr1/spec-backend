generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model balance_history {
  id         Int       @id @default(autoincrement())
  task_id    Int?
  user_id    Int?
  reason_id  Int
  val        Float
  created_at DateTime? @default(now()) @db.Timestamp(6)
  tasks      tasks?    @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model categories {
  id               Int             @id @default(autoincrement())
  name             String
  parent_id        Int?
  categories       categories?     @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_categories categories[]    @relation("categoriesTocategories")
  tasks            tasks[]
  user_category    user_category[]
}

model cities {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  tasks tasks[]
  users users[]
}

model statuses {
  id           Int            @id @default(autoincrement())
  name         String
  task_history task_history[]
  tasks        tasks[]
}

model task_history {
  id         Int       @id @default(autoincrement())
  task_id    Int?
  user_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  comment    String?
  status_id  Int?
  statuses   statuses? @relation(fields: [status_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks      tasks?    @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tasks {
  id                                   Int               @id @default(autoincrement())
  city_id                              Int?
  title                                String?
  category_id                          Int?
  execute_at                           DateTime?         @db.Timestamp(6)
  description                          String?
  price_min                            Float
  price_max                            Float
  price_fact                           Float?
  phone                                String
  address                              String
  status_id                            Int?
  creator_user_id                      Int?
  performer_user_id                    Int?
  created_at                           DateTime?         @default(now()) @db.Timestamp(6)
  commission                           Float
  city_area                            String?
  emergency_call                       Boolean?          @default(false)
  balance_history                      balance_history[]
  task_history                         task_history[]
  categories                           categories?       @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cities                               cities?           @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_tasks_creator_user_idTousers   users?            @relation("tasks_creator_user_idTousers", fields: [creator_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_tasks_performer_user_idTousers users?            @relation("tasks_performer_user_idTousers", fields: [performer_user_id], references: [id], onUpdate: NoAction)
  statuses                             statuses?         @relation(fields: [status_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_category {
  id          Int         @id @default(autoincrement())
  user_id     Int?
  category_id Int?
  categories  categories? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                   Int               @id @default(autoincrement())
  username                             String?           @unique
  fullname                             String?
  phone                                String            @unique
  password_hash                        String
  created_at                           DateTime?         @default(now()) @db.Timestamp(6)
  app_token                            String?
  user_agent                           String?
  city_id                              Int?
  role                                 String
  priority                             Int
  balance_history                      balance_history[]
  task_history                         task_history[]
  tasks_tasks_creator_user_idTousers   tasks[]           @relation("tasks_creator_user_idTousers")
  tasks_tasks_performer_user_idTousers tasks[]           @relation("tasks_performer_user_idTousers")
  user_category                        user_category[]
  cities                               cities?           @relation(fields: [city_id], references: [id], onUpdate: NoAction)
}
